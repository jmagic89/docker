#!/bin/sh

set -e
user=ipfs
repo="$IPFS_PATH"

if [ `id -u` -eq 0 ]; then
  echo "Changing user to $user"
  # ensure folder is writable
  su-exec "$user" test -w "$repo" || chown -R -- "$user" "$repo"
  # restart script with new privileges
  exec su-exec "$user" "$0" "$@"
fi

# 2nd invocation with regular user
ipfs version

if [ -e "$repo/config" ]; then
  echo "Found IPFS fs-repo at $repo"

  rm -f $repo/api $repo/repo.lock
else
  case "$IPFS_PROFILE" in
    "") INIT_ARGS="" ;;
    *) INIT_ARGS="--profile=$IPFS_PROFILE" ;;
  esac

  ipfs init $INIT_ARGS
  ipfs config Addresses.API /ip4/0.0.0.0/tcp/5001
  ipfs config Addresses.Gateway /ip4/0.0.0.0/tcp/8080

  # Set up the swarm key, if provided

  SWARM_KEY_FILE="$repo/swarm.key"
  SWARM_KEY_PERM=0740

  # Create a swarm key from a given environment variable
  if [ ! -z "$IPFS_SWARM_KEY" ] ; then
    echo "Copying swarm key from variable..."
    echo -e "$IPFS_SWARM_KEY" >"$SWARM_KEY_FILE" || exit 1
    chmod $SWARM_KEY_PERM "$SWARM_KEY_FILE"
  fi

  # Unset the swarm key variable
  unset IPFS_SWARM_KEY

  # Check during initialization if a swarm key was provided and
  # copy it to the ipfs directory with the right permissions
  # WARNING: This will replace the swarm key if it exists
  if [ ! -z "$IPFS_SWARM_KEY_FILE" ] ; then
    echo "Copying swarm key from file..."
    install -m $SWARM_KEY_PERM "$IPFS_SWARM_KEY_FILE" "$SWARM_KEY_FILE" || exit 1
    chown -- "$user" "$SWARM_KEY_FILE"
  fi

  # Unset the swarm key file variable
  unset IPFS_SWARM_KEY_FILE

  # DreamNet setup
  echo "DreamNet config..."
  ipfs config Datastore.GCPeriod "12h"
  ipfs config --json Datastore.StorageGCWatermark "80"

  ipfs config --bool Experimental.Libp2pStreamMounting true

  ipfs config Ipns.RecordLifetime "24h"
  ipfs config Ipns.RepublishPeriod "1h"

  ipfs config Reprovider.Interval "1h"
  ipfs config Reprovider.Strategy "all"

  ipfs config --bool Swarm.DisableRelay false
  ipfs config --bool Swarm.EnableAutoRelay true
  ipfs config --bool Swarm.EnableRelayHop true

  case "$DREAMLINK_MODE" in
    "node")
      ipfs config Ipns.RepublishPeriod "6h"

      ipfs config Reprovider.Interval "6h"

      ipfs config --bool Swarm.EnableRelayHop false
      ;;
    "router")
      ipfs config Datastore.GCPeriod "1h"
      ipfs config --json Datastore.StorageGCWatermark "70"

      ipfs config Ipns.RepublishPeriod "12h"

      ipfs config Reprovider.Interval "12h"
      ipfs config Reprovider.Strategy "pinned"
      ;;
  esac
fi

echo "DreamNet Bootstrap..."
ipfs bootstrap rm all

if [ ! -z "$DREAMLINK_BOOTSTRAP" ] ; then
  ipfs bootstrap add "/dnsaddr/bootstrap.link.dreamnet.tech/p2p/QmcWoy1FzBicbYuopNT2rT6EDQSBDfco1TxibEyYgWbiMq"
  ipfs bootstrap add "/dnsaddr/bootstrap.link.dreamnet.tech/p2p/QmRQTpmbSVGCDAYw1wyTmPq647dW3fXwkhX6UBQErv1sTJ"
fi

exec ipfs "$@"